# import 
from __future__ import print_function
import os
import sys
import pathlib
from distutils.spawn import find_executable

#-- util functions --#
def skipped(x):
    """
    Does string start with "skip"?
    """
    return str(x).strip().lower().startswith('skip')

def noSkip(x):
    """
    Opposite of skipped()
    """
    return not skipped(x)

def list_files(base_dir, pattern):
    """
    Recursively listing files
    """
    path = pathlib.Path(base_dir)
    return [str(p) for p in path.glob(pattern)]

def make_fasta_splits(n_jobs):
    """
    Creating fasta file names with zero-padded number for a file extension
    """
    if skipped(str(n_jobs)):
        n_jobs = 1
    zero_pad = len(str(n_jobs))
    zero_pad = '{0:0' + str(zero_pad) + 'd}'
    return [str(zero_pad.format(x+1)) for x in range(n_jobs)]

def config_default(config, var1, var2=None, var3=None, default='LL-PIPELINE'):
    """
    If variable not found, adding as default
    """
    if var3 is not None:
        try:
            _ = config[var1][var2][var3]
        except KeyError:
            config[var1][var2][var3] = default
    elif var2 is not None:
        try:
            _ = config[var1][var2]
        except KeyError:
            config[var1][var2] = default
    else:
        try:
            _ = config[var1]
        except KeyError:
            config[var1] = default

def shared_mem():
    """ 
    gets amount of available space (Gb) in /dev/shm
    """
    p = subprocess.Popen(['df', '/dev/shm/'], stdout=subprocess.PIPE)
    output, err = p.communicate()
    rc = p.returncode
    available = 0
    for line in output.decode().split('\n'):        
        line = re.split(' +', line)
        if line[-1].startswith('/dev/shm'):
            total = float(line[1])
            used = float(line[2])
            available = (total - used) / 1e6            
    return available

def which_tmp_dir():
    """
    Determining which temporary directory to use, 
    depending on the amount of shared memory avaiable
    """
    if config['pipeline']['use_shared_mem'] is True and shared_mem() > 80:
        tmp_dir = os.path.join('/dev/shm', os.path.split(config['tmp_dir'])[1])
    else:
        tmp_dir = config['tmp_dir']
    return tmp_dir
