# import 
from __future__ import print_function
import os
import sys
import re
import pathlib
import subprocess

#-- utility functions --#
def gz_is_empty(fname):
    """ Test if gzip file fname is empty. Return True if the
    uncompressed data in fname has zero length or if fname
    itself has zero length. Raises OSError if fname has non-zero
    length and is not a gzip file
    """
    with gzip.open(fname, 'rb') as inF:
        data = inF.read(1)
    return len(data) == 0

def get_used_size(path):
    """ returns % used for file size
    Args: path = directory to check
    """
    cmd = 'df {}'.format(os.path.abspath(path))
    try:
        with open(os.devnull, 'w') as DNULL:
            res = subprocess.run(cmd, check=True, shell=True,
                                 stdout=subprocess.PIPE,
                                 stderr=DNULL)
    except subprocess.CalledProcessError as e:
        return None
    res = res.stdout.decode()
    perc_used = 0
    for i,line in enumerate(res.split('\n')):
        if i == 1:
            line = re.split(r' +', line)
            total = float(line[1])
            used = float(line[2])
            used = -used if used < 0 else used
            perc_used = used / total * 100
            if perc_used > 100:
                perc_used = used / float(line[3]) * 100
    return perc_used

def get_used_inodes(path):
    """ returns % used inodes
    Args: path = directory to check
    """
    path = os.path.abspath(path)
    parent_dir = [x for x in re.split(r'/', path) if x != '']
    try:
        parent_dir = os.path.join('/' + parent_dir[0], parent_dir[1])
    except IndexError:
        parent_dir = os.path.join('/' + parent_dir[0])
    st_p = os.statvfs(parent_dir)    
    st_c = os.statvfs(path)
    used_inode = st_p.f_ffree - st_c.f_ffree
    total_inode = st_c.f_files
    inode_perc = used_inode / total_inode * 100
    return inode_perc

def get_used(label, path):
    """ returns % used size/inodes
    Args: path = directory to check
    """
    if not os.path.isdir(path):
        return None
    size = get_used_size(path)
    inodes = get_used_inodes(path)
    rpt = '{}: {}\n  % used size: {}\n  % used inodes: {}'
    rpt = rpt.format(label, path, round(size,1), round(inodes,1))
    sys.stderr.write('\33[33m{} \x1b[0m\n'.format(rpt))
